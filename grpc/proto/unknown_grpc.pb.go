// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: grpc/proto/unknown.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Complicated_Random_FullMethodName = "/unknown.complicated/Random"
)

// ComplicatedClient is the client API for Complicated service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplicatedClient interface {
	Random(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Value, error)
}

type complicatedClient struct {
	cc grpc.ClientConnInterface
}

func NewComplicatedClient(cc grpc.ClientConnInterface) ComplicatedClient {
	return &complicatedClient{cc}
}

func (c *complicatedClient) Random(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, Complicated_Random_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplicatedServer is the server API for Complicated service.
// All implementations should embed UnimplementedComplicatedServer
// for forward compatibility
type ComplicatedServer interface {
	Random(context.Context, *Empty) (*Value, error)
}

// UnimplementedComplicatedServer should be embedded to have forward compatible implementations.
type UnimplementedComplicatedServer struct {
}

func (UnimplementedComplicatedServer) Random(context.Context, *Empty) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Random not implemented")
}

// UnsafeComplicatedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplicatedServer will
// result in compilation errors.
type UnsafeComplicatedServer interface {
	mustEmbedUnimplementedComplicatedServer()
}

func RegisterComplicatedServer(s grpc.ServiceRegistrar, srv ComplicatedServer) {
	s.RegisterService(&Complicated_ServiceDesc, srv)
}

func _Complicated_Random_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplicatedServer).Random(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Complicated_Random_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplicatedServer).Random(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Complicated_ServiceDesc is the grpc.ServiceDesc for Complicated service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Complicated_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unknown.complicated",
	HandlerType: (*ComplicatedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Random",
			Handler:    _Complicated_Random_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/unknown.proto",
}
