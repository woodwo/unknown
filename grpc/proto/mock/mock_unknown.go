// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/woodwo/unknown/grpc/proto (interfaces: ComplicatedClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/woodwo/unknown/grpc/proto"
	grpc "google.golang.org/grpc"
)

// MockComplicatedClient is a mock of ComplicatedClient interface.
type MockComplicatedClient struct {
	ctrl     *gomock.Controller
	recorder *MockComplicatedClientMockRecorder
}

// MockComplicatedClientMockRecorder is the mock recorder for MockComplicatedClient.
type MockComplicatedClientMockRecorder struct {
	mock *MockComplicatedClient
}

// NewMockComplicatedClient creates a new mock instance.
func NewMockComplicatedClient(ctrl *gomock.Controller) *MockComplicatedClient {
	mock := &MockComplicatedClient{ctrl: ctrl}
	mock.recorder = &MockComplicatedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplicatedClient) EXPECT() *MockComplicatedClientMockRecorder {
	return m.recorder
}

// Random mocks base method.
func (m *MockComplicatedClient) Random(arg0 context.Context, arg1 *proto.Empty, arg2 ...grpc.CallOption) (*proto.Value, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Random", varargs...)
	ret0, _ := ret[0].(*proto.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Random indicates an expected call of Random.
func (mr *MockComplicatedClientMockRecorder) Random(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockComplicatedClient)(nil).Random), varargs...)
}
